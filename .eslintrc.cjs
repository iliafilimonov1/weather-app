module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
  ],
  ignorePatterns: ["dist", ".eslintrc.cjs"],
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint", "react", "react-refresh"],
  rules: {
    semi: ["error", "always"],
    "react-refresh/only-export-components": [
      "warn",
      { allowConstantExport: true },
    ],
    "no-var": "error",
    quotes: ["error", "single"],
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      { allowExpressions: false, allowTypedFunctionExpressions: true },
    ],
    "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
    "no-console": ["warn", { allow: ["warn", "error"] }],
    curly: ["error", "all"],
    eqeqeq: ["error", "always"],
    "prefer-const": "error",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "react/prop-types": "off",
    "no-empty": ["error", { allowEmptyCatch: true }],
    "consistent-return": "error",
    "@typescript-eslint/no-inferrable-types": [
      "error",
      {
        ignoreParameters: true,
        ignoreProperties: true,
      },
    ],
    "react/jsx-curly-brace-presence": [
      "error",
      { props: "never", children: "never" },
    ],
    "no-alert": "error",
    indent: ["error", 2, { SwitchCase: 1 }],
    "arrow-spacing": ["error", { before: true, after: true }],
    "no-debugger": "warn",
    "arrow-body-style": ["error", "as-needed"],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/typedef": ["warn", { arrowParameter: true }],
    "no-param-reassign": ["error", { props: true }],
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      { accessibility: "explicit" },
    ],
    "newline-before-return": "error",
    "max-len": ["warn", { code: 100 }],
    "import/no-cycle": ["warn", { maxDepth: 1 }],
    "react/jsx-no-undef": ["error", { allowGlobals: true }],
    "padding-line-between-statements": [
      "error",
      { blankLine: "always", prev: "*", next: "return" },
      { blankLine: "always", prev: ["const", "let", "var"], next: "*" },
      {
        blankLine: "any",
        prev: ["const", "let", "var"],
        next: ["const", "let", "var"],
      },
    ],
    "eslint-comments/no-unlimited-disable": "error",
    "max-lines": ["warn", { max: 300, skipComments: true }],
    "react/function-component-definition": [
      "error",
      {
        namedComponents: "function-declaration",
        unnamedComponents: "arrow-function",
      },
    ],
  },
};
